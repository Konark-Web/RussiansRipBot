import logging
import time

from aiogram import types, Dispatcher
from sqlalchemy import select

from bot.db.models import Chat, User
from bot.keyboards import schedule_keyboard, chat_settings_keyboard
from bot.api import get_stat_from_api

from apscheduler.schedulers.asyncio import AsyncIOScheduler

log = logging.getLogger(__name__)


async def cmd_start(message: types.Message):
    await message.answer(f'–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}!\n'
                         f'"–Ø –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è –º–æ–∂—É –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä—É—Å–Ω—ñ '
                         f'—è–∫–∞ –∑—Ä–æ–±–∏–ª–∞ –∂–µ—Å—Ç –¥–æ–±—Ä–æ—ó –≤–æ–ª—ñ —Ç–∞ —Å—Ç–∞–ª–∞ "—Ö–æ—Ä–æ—à–∏–º–∏ —Ä—É—Å—Å–∫–∏–º–∏". '
                         f'–¢–∞–∫–æ–∂ –º–æ–∂–µ—à –¥–æ–¥–∞—Ç–∏ –º–µ–Ω–µ –¥–æ —á–∞—Ç–∏–∫—É –∑ –¥—Ä—É–∑\'—è–º–∏ —Ç–∞ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ '
                         f'–∫–æ–∂–Ω–æ–≥–æ –≤–µ—á–æ—Ä–∞ –≥–∞—Ä–Ω—ñ –Ω–æ–≤–∏–Ω–∏ üòÅ \n\n'
                         f'–°–ª–∞–≤–∞ –ó–°–£! üá∫üá¶')

    db_session = message.bot.get("db")
    async with db_session() as session:
        user = await session.get(User, {"user_id": message.from_user.id})

        if user:
            await message.answer(f'–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.\n'
                                 f'–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è, –≤–≤–µ–¥—ñ—Ç—å /settings')
        else:
            await session.merge(User(user_id=message.from_user.id, schedule_status=False))
            await session.commit()

            await message.answer_animation('https://i.imgur.com/AHFxtrN.mp4')
            await message.answer(f'–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ —É–≤—ñ–º–∫–Ω—É—Ç–∏ —â–æ–¥–µ–Ω–Ω–µ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –≤–≤–µ–¥—ñ—Ç—å /settings')


async def settings_user(message: types.Message):
    db_session = message.bot.get("db")
    async with db_session() as session:
        user: User = await session.get(User, {"user_id": message.from_user.id})

    if user.schedule_status:
        schedule_status = '–£–≤—ñ–º–∫–Ω–µ–Ω–æ'
    else:
        schedule_status = '–í–∏–º–∫–Ω–µ–Ω–æ'

    await message.answer(f'–ù–∞–ª–∞—à—Ç—É–π —â–æ–¥–µ–Ω–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É –ø—Ä–∏—î–º–Ω–∏—Ö –Ω–æ–≤–∏–Ω —É –≤–∏–≥–ª—è–¥—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n\n'
                         f'<b>–ó–∞—Ä–∞–∑:</b> {schedule_status}',
                         reply_markup=schedule_keyboard())


async def settings_chat(message: types.Message):
    db_session = message.bot.get("db")
    async with db_session() as session:
        chat: Chat = await session.get(Chat, {"chat_id": message.chat.id})

    if chat.schedule_status:
        schedule_status = '–£–≤—ñ–º–∫–Ω–µ–Ω–æ'
    else:
        schedule_status = '–í–∏–º–∫–Ω–µ–Ω–æ'

    if chat.status:
        status = '–£–≤—ñ–º–∫–Ω–µ–Ω–æ'
    else:
        status = '–í–∏–º–∫–Ω–µ–Ω–æ'

    await message.answer(f'–í–∏ –º–æ–∂–µ—Ç–µ —É–≤—ñ–º–∫–Ω—É—Ç–∏ —á–∏ –≤–∏–º–∫–Ω—É—Ç–∏ —â–æ–¥–µ–Ω–Ω—É—é —Ä–æ–∑—Å–∏–ª–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, '
                         f'–∞–±–æ —Ç–∏–º—á–∞—Å–æ–≤–æ –≤–∏–º–∫–Ω—É—Ç–∏ –±–æ—Ç–∞ –≤ —á–∞—Ç—ñ (—â–æ–± –Ω–µ –≤–∏–¥–∞–ª—è—Ç–∏ –π–æ–≥–æ) \n\n'
                         f'<b>–©–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞:</b> {schedule_status}\n'
                         f'<b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b> {status}',
                         reply_markup=chat_settings_keyboard())


async def output_stats(message: types.Message):
    stats_text = get_stat_from_api()

    await message.answer(stats_text)


async def output_about(message: types.Message):
    await message.answer('Russians Rip ‚ò†Ô∏è - –±–æ—Ç –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –∞–∫—Ç—É–∞–ª—å–Ω–æ—ó '
                         '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—Ç—Ä–∞—Ç–∞–º —Ä–æ—Å—ñ—ó. –ë–æ—Ç–∞ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ '
                         '–¥–æ —á–∞—Ç—É —Ç–∞ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∫–æ–∂–Ω–æ–≥–æ –≤–µ—á–æ—Ä–∞ –≥–∞—Ä–Ω—ñ –Ω–æ–≤–∏–Ω–∏.\n\n'
                         '–ù–µ –∑–∞–±—É–≤–∞–π—Ç–µ –¥–æ–Ω–∞—Ç–∏—Ç–∏ –Ω–∞ –ó–°–£ -> '
                         '<a href="https://send.monobank.ua/jar/2AwsVyDJ6Q">–ó–∞–¥–æ–Ω–∞—Ç–∏—Ç–∏</a>\n'
                         '–ê–≤—Ç–æ—Ä –±–æ—Ç–∞: @Konark96')


async def output_help(message: types.Message):
    await message.answer('/about - –ü—Ä–æ –±–æ—Ç–∞\n'
                         '/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n'
                         '/settings - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞\n'
                         '/rip_stat - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ "—Ö–æ—Ä–æ—à–∏—Ö —Ä—É—Å—Å–∫–∏—Ö"\n\n'
                         '–Ø–∫—â–æ –∑–Ω–∞–π—à–ª–∏ –±–∞–≥, –ø–∏—à—ñ—Ç—å @Konark96')


async def output_donate(message: types.Message):
    await message.answer('–ü—ñ–¥—Ç—Ä–∏–º–∞–π—Ç–µ –ó–°–£ —Ç–∞ –Ω–∞–±–ª–∏–∑—å—Ç–µ –Ω–∞—à—É –ø–µ—Ä–µ–º–æ–≥—É!\n\n'
                         '–ë–§ –°–µ—Ä–≥—ñ—è –ü—Ä–∏—Ç—É–ª–∏ - <a href="https://prytulafoundation.org/uk/home/support_page">–ó–∞–¥–æ–Ω–∞—Ç–∏—Ç–∏</a>\n'
                         '–ë–§ –ü–æ–≤–µ—Ä–Ω–∏—Å—å –∂–∏–≤–∏–º - <a href="https://savelife.in.ua/donate/">–ó–∞–¥–æ–Ω–∞—Ç–∏—Ç–∏</a>\n'
                         '–ú—ñ–Ω—Ü–∏—Ñ—Ä–∏ –£–∫—Ä–∞—ó–Ω–∏ - <a href="https://donate.thedigital.gov.ua/">–ó–∞–¥–æ–Ω–∞—Ç–∏—Ç–∏</a>\n'
                         '–°–ø–µ—Ü —Ä–∞—Ö—É–Ω–æ–∫ –ù–ë–£ - <a href="https://bank.gov.ua/ua/about/support-the-armed-forces">–ó–∞–¥–æ–Ω–∞—Ç–∏—Ç–∏</a>')


async def output_stats_by_cron(dp: Dispatcher):
    stats_text = get_stat_from_api()
    db_session = dp.bot.get("db")

    sql_chat = select(Chat).where(Chat.status == True, Chat.schedule_status == True)
    sql_user = select(User).where(User.schedule_status == True)
    async with db_session() as session:
        chat_request = await session.execute(sql_chat)
        chats = chat_request.scalars()

        user_request = await session.execute(sql_user)
        users = user_request.scalars()

    for chat in chats:
        try:
            await dp.bot.send_message(chat.chat_id, stats_text)
            time.sleep(0.1)
        except Exception as e:
            log.exception(e)

    for user in users:
        try:
            await dp.bot.send_message(user.user_id, stats_text)
            time.sleep(0.1)
        except Exception as e:
            log.exception(e)


def register_commands(dp: Dispatcher):
    dp.register_message_handler(cmd_start, chat_type=types.ChatType.PRIVATE, commands="start")
    dp.register_message_handler(settings_user, chat_type=types.ChatType.PRIVATE, commands="settings")
    dp.register_message_handler(settings_chat,
                                is_admin=True,
                                chat_type=[types.ChatType.GROUP,
                                           types.ChatType.SUPERGROUP],
                                commands="settings")
    dp.register_message_handler(output_stats, commands="rip_stat")
    dp.register_message_handler(output_about, commands="about")
    dp.register_message_handler(output_help, commands="help")
    dp.register_message_handler(output_donate, commands="donate")


def schedule_jobs(scheduler: AsyncIOScheduler, dp: Dispatcher):
    scheduler.add_job(output_stats_by_cron, "cron", hour=18, minute=0, args=(dp,))